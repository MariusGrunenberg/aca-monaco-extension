/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/jsdoc_transformer", ["require", "exports", "typescript", "tsickle/src/decorators", "tsickle/src/externs", "tsickle/src/googmodule", "tsickle/src/jsdoc", "tsickle/src/module_type_translator", "tsickle/src/transformer_util", "tsickle/src/type_translator", "tsickle/src/typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @fileoverview jsdoc_transformer contains the logic to add JSDoc comments to TypeScript code.
     *
     * One of tsickle's features is to add Closure Compiler compatible JSDoc comments containing type
     * annotations, inheritance information, etc., onto TypeScript code. This allows Closure Compiler to
     * make better optimization decisions compared to an untyped code base.
     *
     * The entry point to the annotation operation is jsdocTransformer below. It adds synthetic comments
     * to existing TypeScript constructs, for example:
     *     const x: number = 1;
     * Might get transformed to:
     *     /.. \@type {number} ./
     *     const x: number = 1;
     * Later TypeScript phases then remove the type annotation, and the final emit is JavaScript that
     * only contains the JSDoc comment.
     *
     * To handle certain constructs, this transformer also performs AST transformations, e.g. by adding
     * CommonJS-style exports for type constructs, expanding `export *`, parenthesizing casts, etc.
     */
    var typescript_1 = require("typescript");
    var decorators_1 = require("tsickle/src/decorators");
    var externs_1 = require("tsickle/src/externs");
    var googmodule = require("tsickle/src/googmodule");
    var jsdoc = require("tsickle/src/jsdoc");
    var module_type_translator_1 = require("tsickle/src/module_type_translator");
    var transformerUtil = require("tsickle/src/transformer_util");
    var type_translator_1 = require("tsickle/src/type_translator");
    var ts = require("tsickle/src/typescript");
    function addCommentOn(node, tags, escapeExtraTags) {
        var comment = jsdoc.toSynthesizedComment(tags, escapeExtraTags);
        var comments = ts.getSyntheticLeadingComments(node) || [];
        comments.push(comment);
        ts.setSyntheticLeadingComments(node, comments);
        return comment;
    }
    /** @return true if node has the specified modifier flag set. */
    function isAmbient(node) {
        var current = node;
        while (current) {
            if (transformerUtil.hasModifierFlag(current, ts.ModifierFlags.Ambient))
                return true;
            current = current.parent;
        }
        return false;
    }
    exports.isAmbient = isAmbient;
    /** Adds an \@template clause to docTags if decl has type parameters. */
    function maybeAddTemplateClause(docTags, decl) {
        if (!decl.typeParameters)
            return;
        // Closure does not support template constraints (T extends X), these are ignored below.
        docTags.push({
            tagName: 'template',
            text: decl.typeParameters.map(function (tp) { return transformerUtil.getIdentifierText(tp.name); }).join(', ')
        });
    }
    exports.maybeAddTemplateClause = maybeAddTemplateClause;
    /**
     * Adds heritage clauses (\@extends, \@implements) to the given docTags for decl. Used by
     * jsdoc_transformer and externs generation.
     */
    function maybeAddHeritageClauses(docTags, mtt, decl) {
        var e_1, _a, e_2, _b;
        if (!decl.heritageClauses)
            return;
        var isClass = decl.kind === ts.SyntaxKind.ClassDeclaration;
        var classHasSuperClass = isClass && decl.heritageClauses.some(function (hc) { return hc.token === ts.SyntaxKind.ExtendsKeyword; });
        try {
            for (var _c = __values(decl.heritageClauses), _d = _c.next(); !_d.done; _d = _c.next()) {
                var heritage = _d.value;
                if (!heritage.types)
                    continue;
                if (isClass && heritage.token !== ts.SyntaxKind.ImplementsKeyword && !isAmbient(decl)) {
                    // If a class has "extends Foo", that is preserved in the ES6 output
                    // and we don't need to do anything.  But if it has "implements Foo",
                    // that is a TS-specific thing and we need to translate it to the
                    // the Closure "@implements {Foo}".
                    // However for ambient declarations, we only emit externs, and in those we do need to
                    // add "@extends {Foo}" as they use ES5 syntax.
                    continue;
                }
                try {
                    for (var _e = __values(heritage.types), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var impl = _f.value;
                        var tagName = decl.kind === ts.SyntaxKind.InterfaceDeclaration ? 'extends' : 'implements';
                        var sym = mtt.typeChecker.getSymbolAtLocation(impl.expression);
                        if (!sym) {
                            // It's possible for a class declaration to extend an expression that
                            // does not have have a symbol, for example when a mixin function is
                            // used to build a base class, as in `declare MyClass extends
                            // MyMixin(MyBaseClass)`.
                            //
                            // Handling this correctly is tricky. Closure throws on this
                            // `extends <expression>` syntax (see
                            // https://github.com/google/closure-compiler/issues/2182). We would
                            // probably need to generate an intermediate class declaration and
                            // extend that. For now, just omit the `extends` annotation.
                            mtt.debugWarn(decl, "could not resolve supertype: " + impl.getText());
                            docTags.push({
                                tagName: '',
                                text: 'NOTE: tsickle could not resolve supertype, ' +
                                    'class definition may be incomplete.\n'
                            });
                            continue;
                        }
                        var alias = sym;
                        if (sym.flags & ts.SymbolFlags.TypeAlias) {
                            // It's implementing a type alias.  Follow the type alias back
                            // to the original symbol to check whether it's a type or a value.
                            var type = mtt.typeChecker.getDeclaredTypeOfSymbol(sym);
                            if (!type.symbol) {
                                // It's not clear when this can happen, but if it does all we
                                // do is fail to emit the @implements, which isn't so harmful.
                                continue;
                            }
                            alias = type.symbol;
                        }
                        if (alias.flags & ts.SymbolFlags.Alias) {
                            alias = mtt.typeChecker.getAliasedSymbol(alias);
                        }
                        var typeTranslator = mtt.newTypeTranslator(impl.expression);
                        if (typeTranslator.isBlackListed(alias)) {
                            continue;
                        }
                        // We can only @implements an interface, not a class.
                        // But it's fine to translate TS "implements Class" into Closure
                        // "@extends {Class}" because this is just a type hint.
                        if (alias.flags & ts.SymbolFlags.Class) {
                            if (!isClass) {
                                // Only classes can extend classes in TS. Ignoring the heritage clause should be safe,
                                // as interfaces are @record anyway, so should prevent property disambiguation.
                                // Problem: validate that methods are there?
                                continue;
                            }
                            if (classHasSuperClass && heritage.token !== ts.SyntaxKind.ExtendsKeyword) {
                                // Do not emit an @extends for a class that already has a proper ES6 extends class. This
                                // risks incorrect optimization, as @extends takes precedence, and Closure won't be
                                // aware of the actual type hierarchy of the class.
                                continue;
                            }
                            tagName = 'extends';
                        }
                        else if (alias.flags & ts.SymbolFlags.Value) {
                            // If the symbol was already in the value namespace, then it will
                            // not be a type in the Closure output (because Closure collapses
                            // the type and value namespaces).  Just ignore the implements.
                            continue;
                        }
                        // typeToClosure includes nullability modifiers, so call symbolToString directly here.
                        docTags.push({ tagName: tagName, type: typeTranslator.symbolToString(alias, true) });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    exports.maybeAddHeritageClauses = maybeAddHeritageClauses;
    /**
     * createMemberTypeDeclaration emits the type annotations for members of a class. It's necessary in
     * the case where TypeScript syntax specifies there are additional properties on the class, because
     * to declare these in Closure you must declare these separately from the class.
     *
     * createMemberTypeDeclaration produces an if (false) statement containing property declarations, or
     * null if no declarations could or needed to be generated (e.g. no members, or an unnamed type).
     * The if statement is used to make sure the code is not executed, otherwise property accesses could
     * trigger getters on a superclass. See test_files/fields/fields.ts:BaseThatThrows.
     */
    function createMemberTypeDeclaration(mtt, typeDecl) {
        var e_3, _a, e_4, _b;
        // Gather parameter properties from the constructor, if it exists.
        var ctors = [];
        var paramProps = [];
        var nonStaticProps = [];
        var staticProps = [];
        var unhandled = [];
        var abstractMethods = [];
        try {
            for (var _c = __values(typeDecl.members), _d = _c.next(); !_d.done; _d = _c.next()) {
                var member = _d.value;
                if (member.kind === ts.SyntaxKind.Constructor) {
                    ctors.push(member);
                }
                else if (ts.isPropertyDeclaration(member) || ts.isPropertySignature(member)) {
                    var isStatic = transformerUtil.hasModifierFlag(member, ts.ModifierFlags.Static);
                    if (isStatic) {
                        staticProps.push(member);
                    }
                    else {
                        nonStaticProps.push(member);
                    }
                }
                else if (member.kind === ts.SyntaxKind.MethodDeclaration ||
                    member.kind === ts.SyntaxKind.MethodSignature ||
                    member.kind === ts.SyntaxKind.GetAccessor || member.kind === ts.SyntaxKind.SetAccessor) {
                    if (transformerUtil.hasModifierFlag(member, ts.ModifierFlags.Abstract) ||
                        ts.isInterfaceDeclaration(typeDecl)) {
                        abstractMethods.push(member);
                    }
                    // Non-abstract methods only exist on classes, and are handled in regular emit.
                }
                else {
                    unhandled.push(member);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (ctors.length > 0) {
            // Only the actual constructor implementation, which must be last in a potential sequence of
            // overloaded constructors, may contain parameter properties.
            var ctor = ctors[ctors.length - 1];
            paramProps = ctor.parameters.filter(function (p) { return transformerUtil.hasModifierFlag(p, ts.ModifierFlags.ParameterPropertyModifier); });
        }
        if (nonStaticProps.length === 0 && paramProps.length === 0 && staticProps.length === 0 &&
            abstractMethods.length === 0) {
            // There are no members so we don't need to emit any type
            // annotations helper.
            return null;
        }
        if (!typeDecl.name) {
            mtt.debugWarn(typeDecl, 'cannot add types on unnamed declarations');
            return null;
        }
        var className = transformerUtil.getIdentifierText(typeDecl.name);
        var staticPropAccess = ts.createIdentifier(className);
        var instancePropAccess = ts.createPropertyAccess(staticPropAccess, 'prototype');
        // Closure Compiler will report conformance errors about this being unknown type when emitting
        // class properties as {?|undefined}, instead of just {?}. So make sure to only emit {?|undefined}
        // on interfaces.
        var isInterface = ts.isInterfaceDeclaration(typeDecl);
        var propertyDecls = staticProps.map(function (p) { return createClosurePropertyDeclaration(mtt, staticPropAccess, p, isInterface && !!p.questionToken); });
        propertyDecls.push.apply(propertyDecls, __spread(__spread(nonStaticProps, paramProps).map(function (p) { return createClosurePropertyDeclaration(mtt, instancePropAccess, p, isInterface && !!p.questionToken); })));
        propertyDecls.push.apply(propertyDecls, __spread(unhandled.map(function (p) { return transformerUtil.createMultiLineComment(p, "Skipping unhandled member: " + escapeForComment(p.getText())); })));
        try {
            for (var abstractMethods_1 = __values(abstractMethods), abstractMethods_1_1 = abstractMethods_1.next(); !abstractMethods_1_1.done; abstractMethods_1_1 = abstractMethods_1.next()) {
                var fnDecl = abstractMethods_1_1.value;
                var name_1 = propertyName(fnDecl);
                if (!name_1) {
                    mtt.error(fnDecl, 'anonymous abstract function');
                    continue;
                }
                var _e = __read(mtt.getFunctionTypeJSDoc([fnDecl], []), 2), tags = _e[0], paramNames = _e[1];
                if (decorators_1.hasExportingDecorator(fnDecl, mtt.typeChecker))
                    tags.push({ tagName: 'export' });
                // memberNamespace because abstract methods cannot be static in TypeScript.
                var abstractFnDecl = ts.createStatement(ts.createAssignment(ts.createPropertyAccess(instancePropAccess, name_1), ts.createFunctionExpression(
                /* modifiers */ undefined, 
                /* asterisk */ undefined, 
                /* name */ undefined, 
                /* typeParameters */ undefined, paramNames.map(function (n) { return ts.createParameter(
                /* decorators */ undefined, /* modifiers */ undefined, 
                /* dotDotDot */ undefined, n); }), undefined, ts.createBlock([]))));
                ts.setSyntheticLeadingComments(abstractFnDecl, [jsdoc.toSynthesizedComment(tags)]);
                propertyDecls.push(ts.setSourceMapRange(abstractFnDecl, fnDecl));
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (abstractMethods_1_1 && !abstractMethods_1_1.done && (_b = abstractMethods_1.return)) _b.call(abstractMethods_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // See test_files/fields/fields.ts:BaseThatThrows for a note on this wrapper.
        return ts.createIf(ts.createLiteral(false), ts.createBlock(propertyDecls, true));
    }
    function propertyName(prop) {
        if (!prop.name)
            return null;
        switch (prop.name.kind) {
            case ts.SyntaxKind.Identifier:
                return transformerUtil.getIdentifierText(prop.name);
            case ts.SyntaxKind.StringLiteral:
                // E.g. interface Foo { 'bar': number; }
                // If 'bar' is a name that is not valid in Closure then there's nothing we can do.
                var text = prop.name.text;
                if (!type_translator_1.isValidClosurePropertyName(text))
                    return null;
                return text;
            default:
                return null;
        }
    }
    /** Removes comment metacharacters from a string, to make it safe to embed in a comment. */
    function escapeForComment(str) {
        return str.replace(/\/\*/g, '__').replace(/\*\//g, '__');
    }
    exports.escapeForComment = escapeForComment;
    function createClosurePropertyDeclaration(mtt, expr, prop, optional) {
        var name = propertyName(prop);
        if (!name) {
            mtt.debugWarn(prop, "handle unnamed member:\n" + escapeForComment(prop.getText()));
            return transformerUtil.createMultiLineComment(prop, "Skipping unnamed member:\n" + escapeForComment(prop.getText()));
        }
        var type = mtt.typeToClosure(prop);
        // When a property is optional, e.g.
        //   foo?: string;
        // Then the TypeScript type of the property is string|undefined, the
        // typeToClosure translation handles it correctly, and string|undefined is
        // how you write an optional property in Closure.
        //
        // But in the special case of an optional property with type any:
        //   foo?: any;
        // The TypeScript type of the property is just "any" (because any includes
        // undefined as well) so our default translation of the type is just "?".
        // To mark the property as optional in Closure it must have "|undefined",
        // so the Closure type must be ?|undefined.
        if (optional && type === '?')
            type += '|undefined';
        var tags = mtt.getJSDoc(prop, /* reportWarnings */ true);
        tags.push({ tagName: 'type', type: type });
        if (decorators_1.hasExportingDecorator(prop, mtt.typeChecker)) {
            tags.push({ tagName: 'export' });
        }
        var declStmt = ts.setSourceMapRange(ts.createStatement(ts.createPropertyAccess(expr, name)), prop);
        // Avoid printing annotations that can conflict with @type
        // This avoids Closure's error "type annotation incompatible with other annotations"
        addCommentOn(declStmt, tags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
        return declStmt;
    }
    /**
     * Removes any type assertions and non-null expressions from the AST before TypeScript processing.
     *
     * Ideally, the code in jsdoc_transformer below should just remove the cast expression and
     * replace it with the Closure equivalent. However Angular's compiler is fragile to AST
     * nodes being removed or changing type, so the code must retain the type assertion
     * expression, see: https://github.com/angular/angular/issues/24895.
     *
     * tsickle also cannot just generate and keep a `(/.. @type {SomeType} ./ (expr as SomeType))`
     * because TypeScript removes the parenthesized expressions in that syntax, (reasonably) believing
     * they were only added for the TS cast.
     *
     * The final workaround is then to keep the TypeScript type assertions, and have a post-Angular
     * processing step that removes the assertions before TypeScript sees them.
     *
     * TODO(martinprobst): remove once the Angular issue is fixed.
     */
    function removeTypeAssertions() {
        return function (context) {
            return function (sourceFile) {
                function visitor(node) {
                    switch (node.kind) {
                        case ts.SyntaxKind.TypeAssertionExpression:
                        case ts.SyntaxKind.AsExpression:
                            return ts.visitNode(node.expression, visitor);
                        case ts.SyntaxKind.NonNullExpression:
                            return ts.visitNode(node.expression, visitor);
                        default:
                            break;
                    }
                    return ts.visitEachChild(node, visitor, context);
                }
                return visitor(sourceFile);
            };
        };
    }
    exports.removeTypeAssertions = removeTypeAssertions;
    /**
     * jsdocTransformer returns a transformer factory that converts TypeScript types into the equivalent
     * JSDoc annotations.
     */
    function jsdocTransformer(host, tsOptions, tsHost, typeChecker, diagnostics) {
        return function (context) {
            return function (sourceFile) {
                var moduleTypeTranslator = new module_type_translator_1.ModuleTypeTranslator(sourceFile, typeChecker, host, diagnostics, /*isForExterns*/ false);
                /**
                 * The set of all names exported from an export * in the current module. Used to prevent
                 * emitting duplicated exports. The first export * takes precedence in ES6.
                 */
                var expandedStarImports = new Set();
                function visitClassDeclaration(classDecl) {
                    var mjsdoc = moduleTypeTranslator.getMutableJSDoc(classDecl);
                    if (transformerUtil.hasModifierFlag(classDecl, ts.ModifierFlags.Abstract)) {
                        mjsdoc.tags.push({ tagName: 'abstract' });
                    }
                    maybeAddTemplateClause(mjsdoc.tags, classDecl);
                    if (!host.untyped) {
                        maybeAddHeritageClauses(mjsdoc.tags, moduleTypeTranslator, classDecl);
                    }
                    mjsdoc.updateComment();
                    var decls = [];
                    var memberDecl = createMemberTypeDeclaration(moduleTypeTranslator, classDecl);
                    // WARNING: order is significant; we must create the member decl before transforming away
                    // parameter property comments when visiting the constructor.
                    decls.push(ts.visitEachChild(classDecl, visitor, context));
                    if (memberDecl)
                        decls.push(memberDecl);
                    return decls;
                }
                /**
                 * visitHeritageClause works around a Closure Compiler issue, where the expression in an
                 * "extends" clause must be a simple identifier, and in particular must not be a parenthesized
                 * expression.
                 *
                 * This is triggered when TS code writes "class X extends (Foo as Bar) { ... }", commonly done
                 * to support mixins. For extends clauses in classes, the code below drops the cast and any
                 * parentheticals, leaving just the original expression.
                 *
                 * This is an incomplete workaround, as Closure will still bail on other super expressions,
                 * but retains compatibility with the previous emit that (accidentally) dropped the cast
                 * expression.
                 *
                 * TODO(martinprobst): remove this once the Closure side issue has been resolved.
                 */
                function visitHeritageClause(heritageClause) {
                    if (heritageClause.token !== ts.SyntaxKind.ExtendsKeyword || !heritageClause.parent ||
                        heritageClause.parent.kind === ts.SyntaxKind.InterfaceDeclaration) {
                        return ts.visitEachChild(heritageClause, visitor, context);
                    }
                    if (heritageClause.types.length !== 1) {
                        moduleTypeTranslator.error(heritageClause, "expected exactly one type in class extension clause");
                    }
                    var type = heritageClause.types[0];
                    var expr = type.expression;
                    while (ts.isParenthesizedExpression(expr) || ts.isNonNullExpression(expr) ||
                        ts.isAssertionExpression(expr)) {
                        expr = expr.expression;
                    }
                    return ts.updateHeritageClause(heritageClause, [ts.updateExpressionWithTypeArguments(type, type.typeArguments || [], expr)]);
                }
                function visitInterfaceDeclaration(iface) {
                    var sym = typeChecker.getSymbolAtLocation(iface.name);
                    if (!sym) {
                        moduleTypeTranslator.error(iface, 'interface with no symbol');
                        return [];
                    }
                    // If this symbol is both a type and a value, we cannot emit both into Closure's
                    // single namespace.
                    if (sym.flags & ts.SymbolFlags.Value) {
                        moduleTypeTranslator.debugWarn(iface, "type/symbol conflict for " + sym.name + ", using {?} for now");
                        return [transformerUtil.createSingleLineComment(iface, 'WARNING: interface has both a type and a value, skipping emit')];
                    }
                    var tags = moduleTypeTranslator.getJSDoc(iface, /* reportWarnings */ true) || [];
                    tags.push({ tagName: 'record' });
                    maybeAddTemplateClause(tags, iface);
                    if (!host.untyped) {
                        maybeAddHeritageClauses(tags, moduleTypeTranslator, iface);
                    }
                    var name = transformerUtil.getIdentifierText(iface.name);
                    var modifiers = transformerUtil.hasModifierFlag(iface, ts.ModifierFlags.Export) ?
                        [ts.createToken(ts.SyntaxKind.ExportKeyword)] :
                        undefined;
                    var decl = ts.setSourceMapRange(ts.createFunctionDeclaration(
                    /* decorators */ undefined, modifiers, 
                    /* asterisk */ undefined, name, 
                    /* typeParameters */ undefined, 
                    /* parameters */ [], 
                    /* type */ undefined, 
                    /* body */ ts.createBlock([])), iface);
                    addCommentOn(decl, tags);
                    var memberDecl = createMemberTypeDeclaration(moduleTypeTranslator, iface);
                    return memberDecl ? [decl, memberDecl] : [decl];
                }
                /** Function declarations are emitted as they are, with only JSDoc added. */
                function addJsDocToFunctionLikeDeclaration(fnDecl) {
                    if (!fnDecl.body) {
                        // Two cases: abstract methods and overloaded methods/functions.
                        // Abstract methods are handled in emitTypeAnnotationsHandler.
                        // Overloads are union-ized into the shared type in FunctionType.
                        return;
                    }
                    var extraTags = [];
                    if (decorators_1.hasExportingDecorator(fnDecl, typeChecker))
                        extraTags.push({ tagName: 'export' });
                    var _a = __read(moduleTypeTranslator.getFunctionTypeJSDoc([fnDecl], extraTags), 1), tags = _a[0];
                    var mjsdoc = moduleTypeTranslator.getMutableJSDoc(fnDecl);
                    mjsdoc.tags = tags;
                    mjsdoc.updateComment();
                    moduleTypeTranslator.blacklistTypeParameters(fnDecl, fnDecl.typeParameters);
                }
                /**
                 * visitVariableStatement flattens variable declaration lists (`var a, b;` to `var a; var
                 * b;`), and attaches JSDoc comments to each variable. JSDoc comments preceding the
                 * original variable are attached to the first newly created one.
                 */
                function visitVariableStatement(varStmt) {
                    var e_5, _a;
                    var stmts = [];
                    // "const", "let", etc are stored in node flags on the declarationList.
                    var flags = ts.getCombinedNodeFlags(varStmt.declarationList);
                    var tags = moduleTypeTranslator.getJSDoc(varStmt, /* reportWarnings */ true);
                    var leading = ts.getSyntheticLeadingComments(varStmt);
                    if (leading) {
                        // Attach non-JSDoc comments to a not emitted statement.
                        var commentHolder = ts.createNotEmittedStatement(varStmt);
                        ts.setSyntheticLeadingComments(commentHolder, leading.filter(function (c) { return c.text[0] !== '*'; }));
                        stmts.push(commentHolder);
                    }
                    var declList = ts.visitNode(varStmt.declarationList, visitor);
                    try {
                        for (var _b = __values(declList.declarations), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var decl = _c.value;
                            var localTags = [];
                            if (tags) {
                                // Add any tags and docs preceding the entire statement to the first variable.
                                localTags.push.apply(localTags, __spread(tags));
                                tags = null;
                            }
                            // Add an @type for plain identifiers, but not for bindings patterns (i.e. object or array
                            // destructuring) - those do not have a syntax in Closure.
                            if (ts.isIdentifier(decl.name)) {
                                // For variables that are initialized and use a blacklisted type, do not emit a type at
                                // all. Closure Compiler might be able to infer a better type from the initializer than
                                // the `?` the code below would emit.
                                // TODO(martinprobst): consider doing this for all types that get emitted as ?, not just
                                // for blacklisted ones.
                                var blackListedInitialized = !!decl.initializer && moduleTypeTranslator.isBlackListed(decl);
                                if (!blackListedInitialized) {
                                    // getOriginalNode(decl) is required because the type checker cannot type check
                                    // synthesized nodes.
                                    var typeStr = moduleTypeTranslator.typeToClosure(ts.getOriginalNode(decl));
                                    localTags.push({ tagName: 'type', type: typeStr });
                                }
                            }
                            var newStmt = ts.createVariableStatement(varStmt.modifiers, ts.createVariableDeclarationList([decl], flags));
                            if (localTags.length)
                                addCommentOn(newStmt, localTags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
                            stmts.push(newStmt);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    return stmts;
                }
                /**
                 * shouldEmitExportsAssignments returns true if tsickle should emit `exports.Foo = ...` style
                 * export statements.
                 *
                 * TypeScript modules can export types. Because types are pure design-time constructs in
                 * TypeScript, it does not emit any actual exported symbols for these. But tsickle has to emit
                 * an export, so that downstream Closure code (including tsickle-converted Closure code) can
                 * import upstream types. tsickle has to pick a module format for that, because the pure ES6
                 * export would get stripped by TypeScript.
                 *
                 * tsickle uses CommonJS to emit googmodule, and code not using googmodule doesn't care about
                 * the Closure annotations anyway, so tsickle skips emitting exports if the module target
                 * isn't commonjs.
                 */
                function shouldEmitExportsAssignments() {
                    return tsOptions.module === ts.ModuleKind.CommonJS;
                }
                function visitTypeAliasDeclaration(typeAlias) {
                    // If the type is also defined as a value, skip emitting it. Closure collapses type & value
                    // namespaces, the two emits would conflict if tsickle emitted both.
                    var sym = moduleTypeTranslator.mustGetSymbolAtLocation(typeAlias.name);
                    if (sym.flags & ts.SymbolFlags.Value)
                        return [];
                    // Type aliases are always emitted as the resolved underlying type, so there is no need to
                    // emit anything, except for exported types.
                    if (!transformerUtil.hasModifierFlag(typeAlias, ts.ModifierFlags.Export))
                        return [];
                    if (!shouldEmitExportsAssignments())
                        return [];
                    var typeName = typeAlias.name.getText();
                    // Blacklist any type parameters, Closure does not support type aliases with type
                    // parameters.
                    moduleTypeTranslator.newTypeTranslator(typeAlias).blacklistTypeParameters(moduleTypeTranslator.symbolsToAliasedNames, typeAlias.typeParameters);
                    var typeStr = host.untyped ? '?' : moduleTypeTranslator.typeToClosure(typeAlias, undefined);
                    // In the case of an export, we cannot emit a `export var foo;` because TypeScript drops
                    // exports that are never assigned values, and Closure requires us to not assign values to
                    // typedef exports. Introducing a new local variable and exporting it can cause bugs due to
                    // name shadowing and confusing TypeScript's logic on what symbols and types vs values are
                    // exported. Mangling the name to avoid the conflicts would be reasonably clean, but would
                    // require a two pass emit to first find all type alias names, mangle them, and emit the use
                    // sites only later. With that, the fix here is to never emit type aliases, but always
                    // resolve the alias and emit the underlying type (fixing references in the local module,
                    // and also across modules). For downstream JavaScript code that imports the typedef, we
                    // emit an "export.Foo;" that declares and exports the type, and for TypeScript has no
                    // impact.
                    var tags = moduleTypeTranslator.getJSDoc(typeAlias, /* reportWarnings */ true);
                    tags.push({ tagName: 'typedef', type: typeStr });
                    var decl = ts.setSourceMapRange(ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), ts.createIdentifier(typeName))), typeAlias);
                    addCommentOn(decl, tags, jsdoc.TAGS_CONFLICTING_WITH_TYPE);
                    return [decl];
                }
                /** Emits a parenthesized Closure cast: `(/** \@type ... * / (expr))`. */
                function createClosureCast(context, expression, type) {
                    var inner = ts.createParen(expression);
                    var comment = addCommentOn(inner, [{ tagName: 'type', type: moduleTypeTranslator.typeToClosure(context, type) }]);
                    comment.hasTrailingNewLine = false;
                    return ts.setSourceMapRange(ts.createParen(inner), context);
                }
                /** Converts a TypeScript type assertion into a Closure Cast. */
                function visitAssertionExpression(assertion) {
                    var type = typeChecker.getTypeAtLocation(assertion.type);
                    return createClosureCast(assertion, ts.visitEachChild(assertion, visitor, context), type);
                }
                /**
                 * Converts a TypeScript non-null assertion into a Closure Cast, by stripping |null and
                 * |undefined from a union type.
                 */
                function visitNonNullExpression(nonNull) {
                    var type = typeChecker.getTypeAtLocation(nonNull.expression);
                    var nonNullType = typeChecker.getNonNullableType(type);
                    return createClosureCast(nonNull, ts.visitEachChild(nonNull, visitor, context), nonNullType);
                }
                function visitImportDeclaration(importDecl) {
                    // No need to forward declare side effect imports.
                    if (!importDecl.importClause)
                        return importDecl;
                    // Introduce a goog.forwardDeclare for the module, so that if TypeScript does not emit the
                    // module because it's only used in type positions, the JSDoc comments still reference a
                    // valid Closure level symbol.
                    var sym = typeChecker.getSymbolAtLocation(importDecl.moduleSpecifier);
                    // Scripts do not have a symbol, and neither do unused modules. Scripts can still be
                    // imported, either as side effect imports or with an empty import set ("{}"). TypeScript
                    // does not emit a runtime load for an import with an empty list of symbols, but the import
                    // forces any global declarations from the library to be visible, which is what users use
                    // this for. No symbols from the script need forward declaration, so just return.
                    if (!sym)
                        return importDecl;
                    // Write the export declaration here so that forward declares come after it, and
                    // fileoverview comments do not get moved behind statements.
                    var importPath = googmodule.resolveModuleName({ options: tsOptions, host: tsHost }, sourceFile.fileName, importDecl.moduleSpecifier.text);
                    moduleTypeTranslator.forwardDeclare(importPath, sym, /* isExplicitlyImported? */ true, 
                    /* default import? */ !!importDecl.importClause.name);
                    return importDecl;
                }
                /**
                 * Closure Compiler will fail when it finds incorrect JSDoc tags on nodes. This function
                 * parses and then re-serializes JSDoc comments, escaping or removing illegal tags.
                 */
                function escapeIllegalJSDoc(node) {
                    var mjsdoc = moduleTypeTranslator.getMutableJSDoc(node);
                    mjsdoc.updateComment();
                }
                /** Returns true if a value export should be emitted for the given symbol in export *. */
                function shouldEmitValueExportForSymbol(sym) {
                    if (sym.flags & ts.SymbolFlags.Alias) {
                        sym = typeChecker.getAliasedSymbol(sym);
                    }
                    if ((sym.flags & ts.SymbolFlags.Value) === 0) {
                        // Note: We create explicit exports of type symbols for closure in visitExportDeclaration.
                        return false;
                    }
                    if (!tsOptions.preserveConstEnums && sym.flags & ts.SymbolFlags.ConstEnum) {
                        return false;
                    }
                    return true;
                }
                /**
                 * visitExportDeclaration forward declares exported modules and emits explicit exports for
                 * types (which normally do not get emitted by TypeScript).
                 */
                function visitExportDeclaration(exportDecl) {
                    var e_6, _a, e_7, _b, e_8, _c;
                    var importedModuleSymbol = exportDecl.moduleSpecifier &&
                        typeChecker.getSymbolAtLocation(exportDecl.moduleSpecifier);
                    if (importedModuleSymbol) {
                        // Forward declare all explicitly imported modules, so that symbols can be referenced and
                        // type only modules get force-loaded.
                        moduleTypeTranslator.forwardDeclare(exportDecl.moduleSpecifier.text, importedModuleSymbol, 
                        /* isExplicitlyImported? */ true, /* default import? */ false);
                    }
                    var typesToExport = [];
                    if (!exportDecl.exportClause) {
                        // export * from '...'
                        // Resolve the * into all value symbols exported, and update the export declaration.
                        // Explicitly spelled out exports (i.e. the exports of the current module) take precedence
                        // over implicit ones from export *. Use the current module's exports to filter.
                        var currentModuleSymbol = typeChecker.getSymbolAtLocation(sourceFile);
                        var currentModuleExports = currentModuleSymbol && currentModuleSymbol.exports;
                        if (!importedModuleSymbol) {
                            moduleTypeTranslator.error(exportDecl, "export * without module symbol");
                            return exportDecl;
                        }
                        var exportedSymbols = typeChecker.getExportsOfModule(importedModuleSymbol);
                        var exportSpecifiers = [];
                        try {
                            for (var exportedSymbols_1 = __values(exportedSymbols), exportedSymbols_1_1 = exportedSymbols_1.next(); !exportedSymbols_1_1.done; exportedSymbols_1_1 = exportedSymbols_1.next()) {
                                var sym = exportedSymbols_1_1.value;
                                if (currentModuleExports && currentModuleExports.has(sym.escapedName))
                                    continue;
                                // We might have already generated an export for the given symbol.
                                if (expandedStarImports.has(sym.name))
                                    continue;
                                expandedStarImports.add(sym.name);
                                // Only create an export specifier for values that are exported. For types, the code
                                // below creates specific export statements that match Closure's expectations.
                                if (shouldEmitValueExportForSymbol(sym)) {
                                    exportSpecifiers.push(ts.createExportSpecifier(undefined, sym.name));
                                }
                                else {
                                    typesToExport.push([sym.name, sym]);
                                }
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (exportedSymbols_1_1 && !exportedSymbols_1_1.done && (_a = exportedSymbols_1.return)) _a.call(exportedSymbols_1);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        exportDecl = ts.updateExportDeclaration(exportDecl, exportDecl.decorators, exportDecl.modifiers, ts.createNamedExports(exportSpecifiers), exportDecl.moduleSpecifier);
                    }
                    else {
                        try {
                            for (var _d = __values(exportDecl.exportClause.elements), _e = _d.next(); !_e.done; _e = _d.next()) {
                                var exp = _e.value;
                                var exportedName = transformerUtil.getIdentifierText(exp.name);
                                typesToExport.push([exportedName, moduleTypeTranslator.mustGetSymbolAtLocation(exp.name)]);
                            }
                        }
                        catch (e_7_1) { e_7 = { error: e_7_1 }; }
                        finally {
                            try {
                                if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                            }
                            finally { if (e_7) throw e_7.error; }
                        }
                    }
                    // Do not emit typedef re-exports in untyped mode.
                    if (host.untyped)
                        return exportDecl;
                    var result = [exportDecl];
                    try {
                        for (var typesToExport_1 = __values(typesToExport), typesToExport_1_1 = typesToExport_1.next(); !typesToExport_1_1.done; typesToExport_1_1 = typesToExport_1.next()) {
                            var _f = __read(typesToExport_1_1.value, 2), exportedName = _f[0], sym = _f[1];
                            var aliasedSymbol = sym;
                            if (sym.flags & ts.SymbolFlags.Alias) {
                                aliasedSymbol = typeChecker.getAliasedSymbol(sym);
                            }
                            var isTypeAlias = (aliasedSymbol.flags & ts.SymbolFlags.Value) === 0 &&
                                (aliasedSymbol.flags & (ts.SymbolFlags.TypeAlias | ts.SymbolFlags.Interface)) !== 0;
                            if (!isTypeAlias)
                                continue;
                            var typeName = moduleTypeTranslator.symbolsToAliasedNames.get(aliasedSymbol) || aliasedSymbol.name;
                            var stmt = ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), exportedName));
                            addCommentOn(stmt, [{ tagName: 'typedef', type: '!' + typeName }]);
                            typescript_1.addSyntheticTrailingComment(stmt, ts.SyntaxKind.SingleLineCommentTrivia, ' re-export typedef', true);
                            result.push(stmt);
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (typesToExport_1_1 && !typesToExport_1_1.done && (_c = typesToExport_1.return)) _c.call(typesToExport_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                    return result;
                }
                /**
                 * Returns the identifiers exported in a single exported statement - typically just one
                 * identifier (e.g. for `export function foo()`), but multiple for `export declare var a, b`.
                 */
                function getExportDeclarationNames(node) {
                    switch (node.kind) {
                        case ts.SyntaxKind.VariableStatement:
                            var varDecl = node;
                            return varDecl.declarationList.declarations.map(function (d) { return getExportDeclarationNames(d)[0]; });
                        case ts.SyntaxKind.VariableDeclaration:
                        case ts.SyntaxKind.FunctionDeclaration:
                        case ts.SyntaxKind.InterfaceDeclaration:
                        case ts.SyntaxKind.ClassDeclaration:
                        case ts.SyntaxKind.ModuleDeclaration:
                            var decl = node;
                            if (!decl.name || decl.name.kind !== ts.SyntaxKind.Identifier) {
                                break;
                            }
                            return [decl.name];
                        case ts.SyntaxKind.TypeAliasDeclaration:
                            var typeAlias = node;
                            return [typeAlias.name];
                        default:
                            break;
                    }
                    moduleTypeTranslator.error(node, "unsupported export declaration " + ts.SyntaxKind[node.kind] + ": " + node.getText());
                    return [];
                }
                /**
                 * Ambient declarations declare types for TypeScript's benefit, and will be removede by
                 * TypeScript during its emit phase. Downstream Closure code however might be importing
                 * symbols from this module, so tsickle must emit a Closure-compatible exports declaration.
                 */
                function visitExportedAmbient(node) {
                    var e_9, _a;
                    if (host.untyped || !shouldEmitExportsAssignments())
                        return [node];
                    var declNames = getExportDeclarationNames(node);
                    var result = [node];
                    try {
                        for (var declNames_1 = __values(declNames), declNames_1_1 = declNames_1.next(); !declNames_1_1.done; declNames_1_1 = declNames_1.next()) {
                            var decl = declNames_1_1.value;
                            var sym = typeChecker.getSymbolAtLocation(decl);
                            var isValue = sym.flags & ts.SymbolFlags.Value;
                            // Non-value objects do not exist at runtime, so we cannot access the symbol (it only
                            // exists in externs). Export them as a typedef, which forwards to the type in externs.
                            // Note: TypeScript emits odd code for exported ambients (exports.x for variables, just x
                            // for everything else). That seems buggy, and in either case this code should not attempt
                            // to fix it.
                            // See also https://github.com/Microsoft/TypeScript/issues/8015.
                            if (!isValue) {
                                // Do not emit re-exports for ModuleDeclarations.
                                // Ambient ModuleDeclarations are always referenced as global symbols, so they don't
                                // need to be exported.
                                if (node.kind === ts.SyntaxKind.ModuleDeclaration)
                                    continue;
                                var mangledName = externs_1.moduleNameAsIdentifier(host, sourceFile.fileName);
                                var declName = transformerUtil.getIdentifierText(decl);
                                var stmt = ts.createStatement(ts.createPropertyAccess(ts.createIdentifier('exports'), declName));
                                addCommentOn(stmt, [{ tagName: 'typedef', type: "!" + mangledName + "." + declName }]);
                                result.push(stmt);
                            }
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (declNames_1_1 && !declNames_1_1.done && (_a = declNames_1.return)) _a.call(declNames_1);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    return result;
                }
                function visitor(node) {
                    if (isAmbient(node)) {
                        if (!transformerUtil.hasModifierFlag(node, ts.ModifierFlags.Export))
                            return node;
                        return visitExportedAmbient(node);
                    }
                    switch (node.kind) {
                        case ts.SyntaxKind.ImportDeclaration:
                            return visitImportDeclaration(node);
                        case ts.SyntaxKind.ExportDeclaration:
                            return visitExportDeclaration(node);
                        case ts.SyntaxKind.ClassDeclaration:
                            return visitClassDeclaration(node);
                        case ts.SyntaxKind.InterfaceDeclaration:
                            return visitInterfaceDeclaration(node);
                        case ts.SyntaxKind.HeritageClause:
                            return visitHeritageClause(node);
                        case ts.SyntaxKind.Constructor:
                        case ts.SyntaxKind.FunctionDeclaration:
                        case ts.SyntaxKind.MethodDeclaration:
                        case ts.SyntaxKind.GetAccessor:
                        case ts.SyntaxKind.SetAccessor:
                            addJsDocToFunctionLikeDeclaration(node);
                            break;
                        case ts.SyntaxKind.VariableStatement:
                            return visitVariableStatement(node);
                        case ts.SyntaxKind.PropertyDeclaration:
                        case ts.SyntaxKind.PropertyAssignment:
                            escapeIllegalJSDoc(node);
                            break;
                        case ts.SyntaxKind.Parameter:
                            // Parameter properties (e.g. `constructor(/** docs */ private foo: string)`) might have
                            // JSDoc comments, including JSDoc tags recognized by Closure Compiler. Prevent emitting
                            // any comments on them, so that Closure doesn't error on them.
                            // See test_files/parameter_properties.ts.
                            var paramDecl = node;
                            if (transformerUtil.hasModifierFlag(paramDecl, ts.ModifierFlags.ParameterPropertyModifier)) {
                                ts.setSyntheticLeadingComments(paramDecl, []);
                                jsdoc.suppressLeadingCommentsRecursively(paramDecl);
                            }
                            break;
                        case ts.SyntaxKind.TypeAliasDeclaration:
                            return visitTypeAliasDeclaration(node);
                        case ts.SyntaxKind.AsExpression:
                        case ts.SyntaxKind.TypeAssertionExpression:
                            return visitAssertionExpression(node);
                        case ts.SyntaxKind.NonNullExpression:
                            return visitNonNullExpression(node);
                        default:
                            break;
                    }
                    return ts.visitEachChild(node, visitor, context);
                }
                sourceFile = ts.visitEachChild(sourceFile, visitor, context);
                return moduleTypeTranslator.insertForwardDeclares(sourceFile);
            };
        };
    }
    exports.jsdocTransformer = jsdocTransformer;
});
//# sourceMappingURL=data:application/json;base64,