/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/typescript", ["require", "exports", "typescript", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @fileoverview Abstraction over the TypeScript API that makes multiple
     * versions of TypeScript appear to be interoperable. Any time a breaking change
     * in TypeScript affects Tsickle code, we should extend this shim to present an
     * unbroken API.
     * All code in tsickle should import from this location, not from 'typescript'.
     */
    // tslint:disable:no-any We need to do various unsafe casts between TS versions
    var ts = require("typescript");
    var typescript_1 = require("typescript");
    exports.addSyntheticLeadingComment = typescript_1.addSyntheticLeadingComment;
    exports.addSyntheticTrailingComment = typescript_1.addSyntheticTrailingComment;
    exports.createArrayLiteral = typescript_1.createArrayLiteral;
    exports.createArrayTypeNode = typescript_1.createArrayTypeNode;
    exports.createArrowFunction = typescript_1.createArrowFunction;
    exports.createAssignment = typescript_1.createAssignment;
    exports.createBinary = typescript_1.createBinary;
    exports.createBlock = typescript_1.createBlock;
    exports.createCall = typescript_1.createCall;
    exports.createCompilerHost = typescript_1.createCompilerHost;
    exports.createElementAccess = typescript_1.createElementAccess;
    exports.createExportSpecifier = typescript_1.createExportSpecifier;
    exports.createFunctionDeclaration = typescript_1.createFunctionDeclaration;
    exports.createFunctionExpression = typescript_1.createFunctionExpression;
    exports.createFunctionTypeNode = typescript_1.createFunctionTypeNode;
    exports.createIdentifier = typescript_1.createIdentifier;
    exports.createIf = typescript_1.createIf;
    exports.createIndexSignature = typescript_1.createIndexSignature;
    exports.createKeywordTypeNode = typescript_1.createKeywordTypeNode;
    exports.createLiteral = typescript_1.createLiteral;
    exports.createLiteralTypeNode = typescript_1.createLiteralTypeNode;
    exports.createNamedExports = typescript_1.createNamedExports;
    exports.createNodeArray = typescript_1.createNodeArray;
    exports.createNotEmittedStatement = typescript_1.createNotEmittedStatement;
    exports.createNull = typescript_1.createNull;
    exports.createObjectLiteral = typescript_1.createObjectLiteral;
    exports.createParameter = typescript_1.createParameter;
    exports.createParen = typescript_1.createParen;
    exports.createProgram = typescript_1.createProgram;
    exports.createProperty = typescript_1.createProperty;
    exports.createPropertyAccess = typescript_1.createPropertyAccess;
    exports.createPropertyAssignment = typescript_1.createPropertyAssignment;
    exports.createPropertySignature = typescript_1.createPropertySignature;
    exports.createSourceFile = typescript_1.createSourceFile;
    exports.createStatement = typescript_1.createStatement;
    exports.createToken = typescript_1.createToken;
    exports.createTypeLiteralNode = typescript_1.createTypeLiteralNode;
    exports.createTypeReferenceNode = typescript_1.createTypeReferenceNode;
    exports.createUnionTypeNode = typescript_1.createUnionTypeNode;
    exports.createVariableDeclaration = typescript_1.createVariableDeclaration;
    exports.createVariableDeclarationList = typescript_1.createVariableDeclarationList;
    exports.createVariableStatement = typescript_1.createVariableStatement;
    exports.DiagnosticCategory = typescript_1.DiagnosticCategory;
    exports.EmitFlags = typescript_1.EmitFlags;
    exports.flattenDiagnosticMessageText = typescript_1.flattenDiagnosticMessageText;
    exports.forEachChild = typescript_1.forEachChild;
    exports.formatDiagnostics = typescript_1.formatDiagnostics;
    exports.getCombinedModifierFlags = typescript_1.getCombinedModifierFlags;
    exports.getCombinedNodeFlags = typescript_1.getCombinedNodeFlags;
    exports.getLeadingCommentRanges = typescript_1.getLeadingCommentRanges;
    exports.getLineAndCharacterOfPosition = typescript_1.getLineAndCharacterOfPosition;
    exports.getMutableClone = typescript_1.getMutableClone;
    exports.getOriginalNode = typescript_1.getOriginalNode;
    exports.getPreEmitDiagnostics = typescript_1.getPreEmitDiagnostics;
    exports.getSyntheticLeadingComments = typescript_1.getSyntheticLeadingComments;
    exports.getSyntheticTrailingComments = typescript_1.getSyntheticTrailingComments;
    exports.getTrailingCommentRanges = typescript_1.getTrailingCommentRanges;
    exports.IndexKind = typescript_1.IndexKind;
    exports.isArrowFunction = typescript_1.isArrowFunction;
    exports.isAssertionExpression = typescript_1.isAssertionExpression;
    exports.isBinaryExpression = typescript_1.isBinaryExpression;
    exports.isCallExpression = typescript_1.isCallExpression;
    exports.isExportAssignment = typescript_1.isExportAssignment;
    exports.isExportDeclaration = typescript_1.isExportDeclaration;
    exports.isExpressionStatement = typescript_1.isExpressionStatement;
    exports.isExternalModule = typescript_1.isExternalModule;
    exports.isExternalModuleReference = typescript_1.isExternalModuleReference;
    exports.isFunctionDeclaration = typescript_1.isFunctionDeclaration;
    exports.isIdentifier = typescript_1.isIdentifier;
    exports.isImportDeclaration = typescript_1.isImportDeclaration;
    exports.isImportEqualsDeclaration = typescript_1.isImportEqualsDeclaration;
    exports.isInterfaceDeclaration = typescript_1.isInterfaceDeclaration;
    exports.isLiteralExpression = typescript_1.isLiteralExpression;
    exports.isLiteralTypeNode = typescript_1.isLiteralTypeNode;
    exports.isMethodSignature = typescript_1.isMethodSignature;
    exports.isModuleBlock = typescript_1.isModuleBlock;
    exports.isModuleDeclaration = typescript_1.isModuleDeclaration;
    exports.isNamedImports = typescript_1.isNamedImports;
    exports.isNamespaceExportDeclaration = typescript_1.isNamespaceExportDeclaration;
    exports.isNamespaceImport = typescript_1.isNamespaceImport;
    exports.isNonNullExpression = typescript_1.isNonNullExpression;
    exports.isObjectLiteralExpression = typescript_1.isObjectLiteralExpression;
    exports.isParenthesizedExpression = typescript_1.isParenthesizedExpression;
    exports.isPropertyAccessExpression = typescript_1.isPropertyAccessExpression;
    exports.isPropertyAssignment = typescript_1.isPropertyAssignment;
    exports.isPropertyDeclaration = typescript_1.isPropertyDeclaration;
    exports.isPropertySignature = typescript_1.isPropertySignature;
    exports.isQualifiedName = typescript_1.isQualifiedName;
    exports.isSourceFile = typescript_1.isSourceFile;
    exports.isStringLiteral = typescript_1.isStringLiteral;
    exports.isTypeReferenceNode = typescript_1.isTypeReferenceNode;
    exports.isVariableDeclaration = typescript_1.isVariableDeclaration;
    exports.isVariableStatement = typescript_1.isVariableStatement;
    exports.ModifierFlags = typescript_1.ModifierFlags;
    exports.ModuleKind = typescript_1.ModuleKind;
    exports.NodeFlags = typescript_1.NodeFlags;
    exports.ObjectFlags = typescript_1.ObjectFlags;
    exports.parseCommandLine = typescript_1.parseCommandLine;
    exports.parseJsonConfigFileContent = typescript_1.parseJsonConfigFileContent;
    exports.readConfigFile = typescript_1.readConfigFile;
    exports.resolveModuleName = typescript_1.resolveModuleName;
    exports.ScriptTarget = typescript_1.ScriptTarget;
    exports.setCommentRange = typescript_1.setCommentRange;
    exports.setEmitFlags = typescript_1.setEmitFlags;
    exports.setOriginalNode = typescript_1.setOriginalNode;
    exports.setSourceMapRange = typescript_1.setSourceMapRange;
    exports.setSyntheticLeadingComments = typescript_1.setSyntheticLeadingComments;
    exports.setSyntheticTrailingComments = typescript_1.setSyntheticTrailingComments;
    exports.setTextRange = typescript_1.setTextRange;
    exports.SignatureKind = typescript_1.SignatureKind;
    exports.SymbolFlags = typescript_1.SymbolFlags;
    exports.SymbolFormatFlags = typescript_1.SymbolFormatFlags;
    exports.SyntaxKind = typescript_1.SyntaxKind;
    exports.sys = typescript_1.sys;
    exports.TypeFlags = typescript_1.TypeFlags;
    exports.updateAsExpression = typescript_1.updateAsExpression;
    exports.updateBlock = typescript_1.updateBlock;
    exports.updateConstructor = typescript_1.updateConstructor;
    exports.updateExportDeclaration = typescript_1.updateExportDeclaration;
    exports.updateExpressionWithTypeArguments = typescript_1.updateExpressionWithTypeArguments;
    exports.updateGetAccessor = typescript_1.updateGetAccessor;
    exports.updateHeritageClause = typescript_1.updateHeritageClause;
    exports.updateMethod = typescript_1.updateMethod;
    exports.updateNamedExports = typescript_1.updateNamedExports;
    exports.updateNonNullExpression = typescript_1.updateNonNullExpression;
    exports.updateParameter = typescript_1.updateParameter;
    exports.updateSetAccessor = typescript_1.updateSetAccessor;
    exports.updateSourceFileNode = typescript_1.updateSourceFileNode;
    exports.updateTypeAssertion = typescript_1.updateTypeAssertion;
    exports.visitEachChild = typescript_1.visitEachChild;
    exports.visitFunctionBody = typescript_1.visitFunctionBody;
    exports.visitLexicalEnvironment = typescript_1.visitLexicalEnvironment;
    exports.visitNode = typescript_1.visitNode;
    exports.visitParameterList = typescript_1.visitParameterList;
    // tslint:disable-next-line:variable-name Re-exporting JSDocSignature for backwards compat.
    exports.SyntaxKindJSDocSignature = ts.SyntaxKind.JSDocSignature;
    // getEmitFlags is now private starting in TS 2.5.
    // So we define our own method that calls through to TypeScript to defeat the
    // visibility constraint.
    function getEmitFlags(node) {
        return ts.getEmitFlags(node);
    }
    exports.getEmitFlags = getEmitFlags;
    // Between TypeScript 2.4 and 2.5 updateProperty was modified. If called with 2.4 re-order the
    // parameters.
    exports.updateProperty = ts.updateProperty;
    var _a = __read(ts.version.split('.'), 2), major = _a[0], minor = _a[1];
    if (major === '2' && minor === '4') {
        var updateProperty24_1 = ts.updateProperty;
        exports.updateProperty = function (node, decorators, modifiers, name, questionToken, type, initializer) {
            return updateProperty24_1(node, decorators, modifiers, name, type, initializer);
        };
    }
});
//# sourceMappingURL=data:application/json;base64,