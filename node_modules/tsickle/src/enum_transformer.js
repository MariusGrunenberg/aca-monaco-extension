/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("tsickle/src/enum_transformer", ["require", "exports", "typescript", "tsickle/src/transformer_util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @fileoverview Transforms TypeScript enum declarations to Closure enum declarations, which
     * look like:
     *
     *     /.. @enum {number} ./
     *     const Foo = {BAR: 0, BAZ: 1, ...};
     *     export {Foo};  // even if originally exported on one line.
     *
     * This declares an enum type for Closure Compiler (and Closure JS users of this TS code).
     * Splitting the enum into declaration and export is required so that local references to the
     * type resolve ("@type {Foo}").
     */
    var ts = require("typescript");
    var transformer_util_1 = require("tsickle/src/transformer_util");
    /** isInNamespace returns true if any of node's ancestors is a namespace (ModuleDeclaration). */
    function isInNamespace(node) {
        // Must use the original node because node might have already been transformed, with node.parent
        // no longer being set.
        var parent = ts.getOriginalNode(node).parent;
        while (parent) {
            if (parent.kind === ts.SyntaxKind.ModuleDeclaration) {
                return true;
            }
            parent = parent.parent;
        }
        return false;
    }
    /**
     * getEnumMemberType computes the type of an enum member by inspecting its initializer expression.
     */
    function getEnumMemberType(typeChecker, member) {
        // Enum members without initialization have type 'number'
        if (!member.initializer) {
            return 'number';
        }
        var type = typeChecker.getTypeAtLocation(member.initializer);
        // Note: checking against 'NumberLike' instead of just 'Number' means this code
        // handles both
        //   MEMBER = 3,  // TypeFlags.NumberLiteral
        // and
        //   MEMBER = someFunction(),  // TypeFlags.Number
        if (type.flags & ts.TypeFlags.NumberLike) {
            return 'number';
        }
        // If the value is not a number, it must be a string.
        // TypeScript does not allow enum members to have any other type.
        return 'string';
    }
    /**
     * getEnumType computes the Closure type of an enum, by iterating through the members and gathering
     * their types.
     */
    function getEnumType(typeChecker, enumDecl) {
        var e_1, _a;
        var hasNumber = false;
        var hasString = false;
        try {
            for (var _b = __values(enumDecl.members), _c = _b.next(); !_c.done; _c = _b.next()) {
                var member = _c.value;
                var type = getEnumMemberType(typeChecker, member);
                if (type === 'string') {
                    hasString = true;
                }
                else if (type === 'number') {
                    hasNumber = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (hasNumber && hasString) {
            return '?'; // Closure's new type inference doesn't support enums of unions.
        }
        else if (hasNumber) {
            return 'number';
        }
        else if (hasString) {
            return 'string';
        }
        else {
            // Perhaps an empty enum?
            return '?';
        }
    }
    /**
     * Transformer factory for the enum transformer. See fileoverview for details.
     */
    function enumTransformer(typeChecker, diagnostics) {
        return function (context) {
            function visitor(node) {
                var e_2, _a, e_3, _b;
                if (!ts.isEnumDeclaration(node))
                    return ts.visitEachChild(node, visitor, context);
                // TODO(martinprobst): The enum transformer does not work for enums embedded in namespaces,
                // because TS does not support splitting export and declaration ("export {Foo};") in
                // namespaces. tsickle's emit for namespaces is unintelligible for Closure in any case, so
                // this is left to fix for another day.
                if (isInNamespace(node))
                    return ts.visitEachChild(node, visitor, context);
                var name = node.name.getText();
                var isExported = transformer_util_1.hasModifierFlag(node, ts.ModifierFlags.Export);
                var enumType = getEnumType(typeChecker, node);
                var values = [];
                var enumIndex = 0;
                try {
                    for (var _c = __values(node.members), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var member = _d.value;
                        var enumValue = void 0;
                        if (member.initializer) {
                            var enumConstValue = typeChecker.getConstantValue(member);
                            if (typeof enumConstValue === 'number') {
                                enumIndex = enumConstValue + 1;
                                enumValue = ts.createLiteral(enumConstValue);
                            }
                            else {
                                // Non-numeric enum value (string or an expression).
                                // Emit this initializer expression as-is.
                                // Note: if the member's initializer expression refers to another
                                // value within the enum (e.g. something like
                                //   enum Foo {
                                //     Field1,
                                //     Field2 = Field1 + something(),
                                //   }
                                // Then when we emit the initializer we produce invalid code because
                                // on the Closure side the reference to Field1 has to be namespaced,
                                // e.g. written "Foo.Field1 + something()".
                                // Hopefully this doesn't come up often -- if the enum instead has
                                // something like
                                //     Field2 = Field1 + 3,
                                // then it's still a constant expression and we inline the constant
                                // value in the above branch of this "if" statement.
                                enumValue = visitor(member.initializer);
                            }
                        }
                        else {
                            enumValue = ts.createLiteral(enumIndex);
                            enumIndex++;
                        }
                        var memberName = member.name.getText();
                        values.push(ts.setOriginalNode(ts.setTextRange(ts.createPropertyAssignment(memberName, enumValue), member), member));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var varDecl = ts.createVariableStatement(
                /* modifiers */ undefined, ts.createVariableDeclarationList([ts.createVariableDeclaration(name, undefined, ts.createObjectLiteral(ts.setTextRange(ts.createNodeArray(values, true), node.members), true))], 
                /* create a const var */ ts.NodeFlags.Const));
                var comment = {
                    kind: ts.SyntaxKind.MultiLineCommentTrivia,
                    text: "* @enum {" + enumType + "} ",
                    hasTrailingNewLine: true,
                    pos: -1,
                    end: -1
                };
                ts.setSyntheticLeadingComments(varDecl, [comment]);
                var resultNodes = [varDecl];
                if (isExported) {
                    // Create a separate export {...} statement, so that the enum name can be used in local
                    // type annotations within the file.
                    resultNodes.push(ts.createExportDeclaration(undefined, undefined, ts.createNamedExports([ts.createExportSpecifier(undefined, name)])));
                }
                if (transformer_util_1.hasModifierFlag(node, ts.ModifierFlags.Const)) {
                    // By TypeScript semantics, const enums disappear after TS compilation.
                    // We still need to generate the runtime value above to make Closure Compiler's type system
                    // happy and allow refering to enums from JS code, but we should at least not emit string
                    // value mappings.
                    return resultNodes;
                }
                try {
                    // Emit the reverse mapping of foo[foo.BAR] = 'BAR'; lines for number enum members
                    for (var _e = __values(node.members), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var member = _f.value;
                        var memberName = member.name;
                        var memberType = getEnumMemberType(typeChecker, member);
                        if (memberType !== 'number')
                            continue;
                        // TypeScript enum members can have Identifier names or String names.
                        // We need to emit slightly different code to support these two syntaxes:
                        var nameExpr = void 0;
                        var memberAccess = void 0;
                        if (ts.isIdentifier(memberName)) {
                            // Foo[Foo.ABC] = "ABC";
                            nameExpr = transformer_util_1.createSingleQuoteStringLiteral(memberName.text);
                            // Make sure to create a clean, new identifier, so comments do not get emitted twice.
                            var ident = ts.createIdentifier(transformer_util_1.getIdentifierText(memberName));
                            memberAccess = ts.createPropertyAccess(ts.createIdentifier(name), ident);
                        }
                        else {
                            // Foo[Foo["A B C"]] = "A B C"; or Foo[Foo[expression]] = expression;
                            nameExpr = ts.isComputedPropertyName(memberName) ? memberName.expression : memberName;
                            memberAccess = ts.createElementAccess(ts.createIdentifier(name), nameExpr);
                        }
                        resultNodes.push(ts.createStatement(ts.createAssignment(ts.createElementAccess(ts.createIdentifier(name), memberAccess), nameExpr)));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return resultNodes;
            }
            return function (sf) { return visitor(sf); };
        };
    }
    exports.enumTransformer = enumTransformer;
});
//# sourceMappingURL=data:application/json;base64,